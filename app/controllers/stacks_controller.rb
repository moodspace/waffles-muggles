# waffles-muggles
#
# CS 5150 Navigation in Library Stacks.
#
# OpenAPI spec version: 1.0.0
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
#
class StacksController < ApplicationController
    def index
        ret = []
        Stack.find_each do |stack|
            if stack.floor == params[:floor_id].to_i
                ret << {
                    id: stack.id,
                    cx: stack.cx,
                    cy: stack.cy,
                    lx: stack.lx,
                    ly: stack.ly,
                    rotation: stack.rotation,
                    geojson: stack.geojson,
                    startClass: stack.start_class,
                    startSubclass: stack.start_subclass,
                    endClass: stack.end_class,
                    endSubclass: stack.end_subclass,
                    oversize: stack.oversize,
                    floor: stack.floor
                }
            end
        end
        render json: ret
    end

    def destroy
        Stack.find(params[:id]).destroy
        render json: 'OK'.to_json
    end

    def show
        stack = Stack.find(params[:id])
        render json: {
            id: stack.id,
            cx: stack.cx,
            cy: stack.cy,
            lx: stack.lx,
            ly: stack.ly,
            rotation: stack.rotation,
            geojson: stack.geojson,
            startClass: stack.start_class,
            startSubclass: stack.start_subclass,
            endClass: stack.end_class,
            endSubclass: stack.end_subclass,
            oversize: stack.oversize,
            floor: stack.floor
        }
    end

    def create
        stack = Stack.new
        stack.cx = params[:cx]
        stack.cy = params[:cy]
        stack.lx = params[:lx]
        stack.ly = params[:ly]
        stack.rotation = params[:rotation] ? params[:rotation] : 0
        stack.geojson = params[:geojson]
        stack.start_class = params[:startClass]
        stack.start_subclass = params[:startSubclass] ? params[:startSubclass] : 0
        stack.end_class = params[:endClass]
        stack.end_subclass = params[:endSubclass]
        stack.oversize = params[:oversize] ? params[:oversize] : 0
        stack.floor = params[:floor]
        stack.save
        render json: 'OK'.to_json
    end

    def stacks_put
        stack = Stack.find(params[:id])
        stack.cx = params[:cx]
        stack.cy = params[:cy]
        stack.lx = params[:lx]
        stack.ly = params[:ly]
        stack.rotation = params[:rotation] ? params[:rotation] : 0
        stack.geojson = params[:geojson]
        stack.start_class = params[:startClass]
        stack.start_subclass = params[:startSubclass] ? params[:startSubclass] : 0
        stack.end_class = params[:endClass]
        stack.end_subclass = params[:endSubclass]
        stack.oversize = params[:oversize] ? params[:oversize] : 0
        stack.floor = params[:floor]
        stack.save
        render json: 'OK'.to_json
    end
end
